// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newPositionType(db *gorm.DB, opts ...gen.DOOption) positionType {
	_positionType := positionType{}

	_positionType.positionTypeDo.UseDB(db, opts...)
	_positionType.positionTypeDo.UseModel(&model.PositionType{})

	tableName := _positionType.positionTypeDo.TableName()
	_positionType.ALL = field.NewAsterisk(tableName)
	_positionType.ID = field.NewInt64(tableName, "id")
	_positionType.PositionName = field.NewString(tableName, "position_name")
	_positionType.PositionExplain = field.NewString(tableName, "position_explain")
	_positionType.CreateTime = field.NewTime(tableName, "create_time")

	_positionType.fillFieldMap()

	return _positionType
}

type positionType struct {
	positionTypeDo

	ALL             field.Asterisk
	ID              field.Int64  // 职位类型 ID、自增 ID
	PositionName    field.String // 职位名称
	PositionExplain field.String // 职位描述
	CreateTime      field.Time   // 记录创建时间

	fieldMap map[string]field.Expr
}

func (p positionType) Table(newTableName string) *positionType {
	p.positionTypeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p positionType) As(alias string) *positionType {
	p.positionTypeDo.DO = *(p.positionTypeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *positionType) updateTableName(table string) *positionType {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PositionName = field.NewString(table, "position_name")
	p.PositionExplain = field.NewString(table, "position_explain")
	p.CreateTime = field.NewTime(table, "create_time")

	p.fillFieldMap()

	return p
}

func (p *positionType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *positionType) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["position_name"] = p.PositionName
	p.fieldMap["position_explain"] = p.PositionExplain
	p.fieldMap["create_time"] = p.CreateTime
}

func (p positionType) clone(db *gorm.DB) positionType {
	p.positionTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p positionType) replaceDB(db *gorm.DB) positionType {
	p.positionTypeDo.ReplaceDB(db)
	return p
}

type positionTypeDo struct{ gen.DO }

type IPositionTypeDo interface {
	gen.SubQuery
	Debug() IPositionTypeDo
	WithContext(ctx context.Context) IPositionTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPositionTypeDo
	WriteDB() IPositionTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPositionTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPositionTypeDo
	Not(conds ...gen.Condition) IPositionTypeDo
	Or(conds ...gen.Condition) IPositionTypeDo
	Select(conds ...field.Expr) IPositionTypeDo
	Where(conds ...gen.Condition) IPositionTypeDo
	Order(conds ...field.Expr) IPositionTypeDo
	Distinct(cols ...field.Expr) IPositionTypeDo
	Omit(cols ...field.Expr) IPositionTypeDo
	Join(table schema.Tabler, on ...field.Expr) IPositionTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPositionTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPositionTypeDo
	Group(cols ...field.Expr) IPositionTypeDo
	Having(conds ...gen.Condition) IPositionTypeDo
	Limit(limit int) IPositionTypeDo
	Offset(offset int) IPositionTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionTypeDo
	Unscoped() IPositionTypeDo
	Create(values ...*model.PositionType) error
	CreateInBatches(values []*model.PositionType, batchSize int) error
	Save(values ...*model.PositionType) error
	First() (*model.PositionType, error)
	Take() (*model.PositionType, error)
	Last() (*model.PositionType, error)
	Find() ([]*model.PositionType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PositionType, err error)
	FindInBatches(result *[]*model.PositionType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PositionType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPositionTypeDo
	Assign(attrs ...field.AssignExpr) IPositionTypeDo
	Joins(fields ...field.RelationField) IPositionTypeDo
	Preload(fields ...field.RelationField) IPositionTypeDo
	FirstOrInit() (*model.PositionType, error)
	FirstOrCreate() (*model.PositionType, error)
	FindByPage(offset int, limit int) (result []*model.PositionType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPositionTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p positionTypeDo) Debug() IPositionTypeDo {
	return p.withDO(p.DO.Debug())
}

func (p positionTypeDo) WithContext(ctx context.Context) IPositionTypeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p positionTypeDo) ReadDB() IPositionTypeDo {
	return p.Clauses(dbresolver.Read)
}

func (p positionTypeDo) WriteDB() IPositionTypeDo {
	return p.Clauses(dbresolver.Write)
}

func (p positionTypeDo) Session(config *gorm.Session) IPositionTypeDo {
	return p.withDO(p.DO.Session(config))
}

func (p positionTypeDo) Clauses(conds ...clause.Expression) IPositionTypeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p positionTypeDo) Returning(value interface{}, columns ...string) IPositionTypeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p positionTypeDo) Not(conds ...gen.Condition) IPositionTypeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p positionTypeDo) Or(conds ...gen.Condition) IPositionTypeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p positionTypeDo) Select(conds ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p positionTypeDo) Where(conds ...gen.Condition) IPositionTypeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p positionTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPositionTypeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p positionTypeDo) Order(conds ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p positionTypeDo) Distinct(cols ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p positionTypeDo) Omit(cols ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p positionTypeDo) Join(table schema.Tabler, on ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p positionTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p positionTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p positionTypeDo) Group(cols ...field.Expr) IPositionTypeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p positionTypeDo) Having(conds ...gen.Condition) IPositionTypeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p positionTypeDo) Limit(limit int) IPositionTypeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p positionTypeDo) Offset(offset int) IPositionTypeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p positionTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionTypeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p positionTypeDo) Unscoped() IPositionTypeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p positionTypeDo) Create(values ...*model.PositionType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p positionTypeDo) CreateInBatches(values []*model.PositionType, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p positionTypeDo) Save(values ...*model.PositionType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p positionTypeDo) First() (*model.PositionType, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionType), nil
	}
}

func (p positionTypeDo) Take() (*model.PositionType, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionType), nil
	}
}

func (p positionTypeDo) Last() (*model.PositionType, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionType), nil
	}
}

func (p positionTypeDo) Find() ([]*model.PositionType, error) {
	result, err := p.DO.Find()
	return result.([]*model.PositionType), err
}

func (p positionTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PositionType, err error) {
	buf := make([]*model.PositionType, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p positionTypeDo) FindInBatches(result *[]*model.PositionType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p positionTypeDo) Attrs(attrs ...field.AssignExpr) IPositionTypeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p positionTypeDo) Assign(attrs ...field.AssignExpr) IPositionTypeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p positionTypeDo) Joins(fields ...field.RelationField) IPositionTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p positionTypeDo) Preload(fields ...field.RelationField) IPositionTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p positionTypeDo) FirstOrInit() (*model.PositionType, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionType), nil
	}
}

func (p positionTypeDo) FirstOrCreate() (*model.PositionType, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionType), nil
	}
}

func (p positionTypeDo) FindByPage(offset int, limit int) (result []*model.PositionType, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p positionTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p positionTypeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p positionTypeDo) Delete(models ...*model.PositionType) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *positionTypeDo) withDO(do gen.Dao) *positionTypeDo {
	p.DO = *do.(*gen.DO)
	return p
}
