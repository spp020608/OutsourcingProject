// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newUserWork(db *gorm.DB, opts ...gen.DOOption) userWork {
	_userWork := userWork{}

	_userWork.userWorkDo.UseDB(db, opts...)
	_userWork.userWorkDo.UseModel(&model.UserWork{})

	tableName := _userWork.userWorkDo.TableName()
	_userWork.ALL = field.NewAsterisk(tableName)
	_userWork.ID = field.NewInt64(tableName, "id")
	_userWork.UserID = field.NewInt64(tableName, "user_id")
	_userWork.CompanyName = field.NewString(tableName, "company_name")
	_userWork.StationName = field.NewString(tableName, "station_name")
	_userWork.WorkContent = field.NewString(tableName, "work_content")
	_userWork.StartTime = field.NewTime(tableName, "start_time")
	_userWork.EndTime = field.NewTime(tableName, "end_time")
	_userWork.CreateTime = field.NewTime(tableName, "create_time")

	_userWork.fillFieldMap()

	return _userWork
}

type userWork struct {
	userWorkDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64  // 用户id
	CompanyName field.String // 公司名称
	StationName field.String // 岗位名称
	WorkContent field.String // 工作内容
	StartTime   field.Time   // 工作开始时间
	EndTime     field.Time   // 工作结束时间
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (u userWork) Table(newTableName string) *userWork {
	u.userWorkDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userWork) As(alias string) *userWork {
	u.userWorkDo.DO = *(u.userWorkDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userWork) updateTableName(table string) *userWork {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.CompanyName = field.NewString(table, "company_name")
	u.StationName = field.NewString(table, "station_name")
	u.WorkContent = field.NewString(table, "work_content")
	u.StartTime = field.NewTime(table, "start_time")
	u.EndTime = field.NewTime(table, "end_time")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *userWork) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userWork) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["company_name"] = u.CompanyName
	u.fieldMap["station_name"] = u.StationName
	u.fieldMap["work_content"] = u.WorkContent
	u.fieldMap["start_time"] = u.StartTime
	u.fieldMap["end_time"] = u.EndTime
	u.fieldMap["create_time"] = u.CreateTime
}

func (u userWork) clone(db *gorm.DB) userWork {
	u.userWorkDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userWork) replaceDB(db *gorm.DB) userWork {
	u.userWorkDo.ReplaceDB(db)
	return u
}

type userWorkDo struct{ gen.DO }

type IUserWorkDo interface {
	gen.SubQuery
	Debug() IUserWorkDo
	WithContext(ctx context.Context) IUserWorkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserWorkDo
	WriteDB() IUserWorkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserWorkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserWorkDo
	Not(conds ...gen.Condition) IUserWorkDo
	Or(conds ...gen.Condition) IUserWorkDo
	Select(conds ...field.Expr) IUserWorkDo
	Where(conds ...gen.Condition) IUserWorkDo
	Order(conds ...field.Expr) IUserWorkDo
	Distinct(cols ...field.Expr) IUserWorkDo
	Omit(cols ...field.Expr) IUserWorkDo
	Join(table schema.Tabler, on ...field.Expr) IUserWorkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserWorkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserWorkDo
	Group(cols ...field.Expr) IUserWorkDo
	Having(conds ...gen.Condition) IUserWorkDo
	Limit(limit int) IUserWorkDo
	Offset(offset int) IUserWorkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserWorkDo
	Unscoped() IUserWorkDo
	Create(values ...*model.UserWork) error
	CreateInBatches(values []*model.UserWork, batchSize int) error
	Save(values ...*model.UserWork) error
	First() (*model.UserWork, error)
	Take() (*model.UserWork, error)
	Last() (*model.UserWork, error)
	Find() ([]*model.UserWork, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserWork, err error)
	FindInBatches(result *[]*model.UserWork, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserWork) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserWorkDo
	Assign(attrs ...field.AssignExpr) IUserWorkDo
	Joins(fields ...field.RelationField) IUserWorkDo
	Preload(fields ...field.RelationField) IUserWorkDo
	FirstOrInit() (*model.UserWork, error)
	FirstOrCreate() (*model.UserWork, error)
	FindByPage(offset int, limit int) (result []*model.UserWork, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserWorkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userWorkDo) Debug() IUserWorkDo {
	return u.withDO(u.DO.Debug())
}

func (u userWorkDo) WithContext(ctx context.Context) IUserWorkDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userWorkDo) ReadDB() IUserWorkDo {
	return u.Clauses(dbresolver.Read)
}

func (u userWorkDo) WriteDB() IUserWorkDo {
	return u.Clauses(dbresolver.Write)
}

func (u userWorkDo) Session(config *gorm.Session) IUserWorkDo {
	return u.withDO(u.DO.Session(config))
}

func (u userWorkDo) Clauses(conds ...clause.Expression) IUserWorkDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userWorkDo) Returning(value interface{}, columns ...string) IUserWorkDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userWorkDo) Not(conds ...gen.Condition) IUserWorkDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userWorkDo) Or(conds ...gen.Condition) IUserWorkDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userWorkDo) Select(conds ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userWorkDo) Where(conds ...gen.Condition) IUserWorkDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userWorkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserWorkDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userWorkDo) Order(conds ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userWorkDo) Distinct(cols ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userWorkDo) Omit(cols ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userWorkDo) Join(table schema.Tabler, on ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userWorkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userWorkDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userWorkDo) Group(cols ...field.Expr) IUserWorkDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userWorkDo) Having(conds ...gen.Condition) IUserWorkDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userWorkDo) Limit(limit int) IUserWorkDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userWorkDo) Offset(offset int) IUserWorkDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userWorkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserWorkDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userWorkDo) Unscoped() IUserWorkDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userWorkDo) Create(values ...*model.UserWork) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userWorkDo) CreateInBatches(values []*model.UserWork, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userWorkDo) Save(values ...*model.UserWork) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userWorkDo) First() (*model.UserWork, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWork), nil
	}
}

func (u userWorkDo) Take() (*model.UserWork, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWork), nil
	}
}

func (u userWorkDo) Last() (*model.UserWork, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWork), nil
	}
}

func (u userWorkDo) Find() ([]*model.UserWork, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserWork), err
}

func (u userWorkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserWork, err error) {
	buf := make([]*model.UserWork, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userWorkDo) FindInBatches(result *[]*model.UserWork, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userWorkDo) Attrs(attrs ...field.AssignExpr) IUserWorkDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userWorkDo) Assign(attrs ...field.AssignExpr) IUserWorkDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userWorkDo) Joins(fields ...field.RelationField) IUserWorkDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userWorkDo) Preload(fields ...field.RelationField) IUserWorkDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userWorkDo) FirstOrInit() (*model.UserWork, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWork), nil
	}
}

func (u userWorkDo) FirstOrCreate() (*model.UserWork, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWork), nil
	}
}

func (u userWorkDo) FindByPage(offset int, limit int) (result []*model.UserWork, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userWorkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userWorkDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userWorkDo) Delete(models ...*model.UserWork) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userWorkDo) withDO(do gen.Dao) *userWorkDo {
	u.DO = *do.(*gen.DO)
	return u
}
