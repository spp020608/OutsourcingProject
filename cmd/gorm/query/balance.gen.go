// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newBalance(db *gorm.DB, opts ...gen.DOOption) balance {
	_balance := balance{}

	_balance.balanceDo.UseDB(db, opts...)
	_balance.balanceDo.UseModel(&model.Balance{})

	tableName := _balance.balanceDo.TableName()
	_balance.ALL = field.NewAsterisk(tableName)
	_balance.ID = field.NewInt64(tableName, "id")
	_balance.UserID = field.NewInt64(tableName, "user_id")
	_balance.Balance = field.NewFloat64(tableName, "balance")
	_balance.UpdateTime = field.NewTime(tableName, "update_time")

	_balance.fillFieldMap()

	return _balance
}

type balance struct {
	balanceDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64   // 用户id
	Balance    field.Float64 // 余额(元)
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (b balance) Table(newTableName string) *balance {
	b.balanceDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b balance) As(alias string) *balance {
	b.balanceDo.DO = *(b.balanceDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *balance) updateTableName(table string) *balance {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.UserID = field.NewInt64(table, "user_id")
	b.Balance = field.NewFloat64(table, "balance")
	b.UpdateTime = field.NewTime(table, "update_time")

	b.fillFieldMap()

	return b
}

func (b *balance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *balance) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["balance"] = b.Balance
	b.fieldMap["update_time"] = b.UpdateTime
}

func (b balance) clone(db *gorm.DB) balance {
	b.balanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b balance) replaceDB(db *gorm.DB) balance {
	b.balanceDo.ReplaceDB(db)
	return b
}

type balanceDo struct{ gen.DO }

type IBalanceDo interface {
	gen.SubQuery
	Debug() IBalanceDo
	WithContext(ctx context.Context) IBalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBalanceDo
	WriteDB() IBalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBalanceDo
	Not(conds ...gen.Condition) IBalanceDo
	Or(conds ...gen.Condition) IBalanceDo
	Select(conds ...field.Expr) IBalanceDo
	Where(conds ...gen.Condition) IBalanceDo
	Order(conds ...field.Expr) IBalanceDo
	Distinct(cols ...field.Expr) IBalanceDo
	Omit(cols ...field.Expr) IBalanceDo
	Join(table schema.Tabler, on ...field.Expr) IBalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBalanceDo
	Group(cols ...field.Expr) IBalanceDo
	Having(conds ...gen.Condition) IBalanceDo
	Limit(limit int) IBalanceDo
	Offset(offset int) IBalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBalanceDo
	Unscoped() IBalanceDo
	Create(values ...*model.Balance) error
	CreateInBatches(values []*model.Balance, batchSize int) error
	Save(values ...*model.Balance) error
	First() (*model.Balance, error)
	Take() (*model.Balance, error)
	Last() (*model.Balance, error)
	Find() ([]*model.Balance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Balance, err error)
	FindInBatches(result *[]*model.Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Balance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBalanceDo
	Assign(attrs ...field.AssignExpr) IBalanceDo
	Joins(fields ...field.RelationField) IBalanceDo
	Preload(fields ...field.RelationField) IBalanceDo
	FirstOrInit() (*model.Balance, error)
	FirstOrCreate() (*model.Balance, error)
	FindByPage(offset int, limit int) (result []*model.Balance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b balanceDo) Debug() IBalanceDo {
	return b.withDO(b.DO.Debug())
}

func (b balanceDo) WithContext(ctx context.Context) IBalanceDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b balanceDo) ReadDB() IBalanceDo {
	return b.Clauses(dbresolver.Read)
}

func (b balanceDo) WriteDB() IBalanceDo {
	return b.Clauses(dbresolver.Write)
}

func (b balanceDo) Session(config *gorm.Session) IBalanceDo {
	return b.withDO(b.DO.Session(config))
}

func (b balanceDo) Clauses(conds ...clause.Expression) IBalanceDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b balanceDo) Returning(value interface{}, columns ...string) IBalanceDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b balanceDo) Not(conds ...gen.Condition) IBalanceDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b balanceDo) Or(conds ...gen.Condition) IBalanceDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b balanceDo) Select(conds ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b balanceDo) Where(conds ...gen.Condition) IBalanceDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b balanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBalanceDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b balanceDo) Order(conds ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b balanceDo) Distinct(cols ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b balanceDo) Omit(cols ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b balanceDo) Join(table schema.Tabler, on ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b balanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b balanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b balanceDo) Group(cols ...field.Expr) IBalanceDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b balanceDo) Having(conds ...gen.Condition) IBalanceDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b balanceDo) Limit(limit int) IBalanceDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b balanceDo) Offset(offset int) IBalanceDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b balanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBalanceDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b balanceDo) Unscoped() IBalanceDo {
	return b.withDO(b.DO.Unscoped())
}

func (b balanceDo) Create(values ...*model.Balance) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b balanceDo) CreateInBatches(values []*model.Balance, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b balanceDo) Save(values ...*model.Balance) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b balanceDo) First() (*model.Balance, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Balance), nil
	}
}

func (b balanceDo) Take() (*model.Balance, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Balance), nil
	}
}

func (b balanceDo) Last() (*model.Balance, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Balance), nil
	}
}

func (b balanceDo) Find() ([]*model.Balance, error) {
	result, err := b.DO.Find()
	return result.([]*model.Balance), err
}

func (b balanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Balance, err error) {
	buf := make([]*model.Balance, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b balanceDo) FindInBatches(result *[]*model.Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b balanceDo) Attrs(attrs ...field.AssignExpr) IBalanceDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b balanceDo) Assign(attrs ...field.AssignExpr) IBalanceDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b balanceDo) Joins(fields ...field.RelationField) IBalanceDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b balanceDo) Preload(fields ...field.RelationField) IBalanceDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b balanceDo) FirstOrInit() (*model.Balance, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Balance), nil
	}
}

func (b balanceDo) FirstOrCreate() (*model.Balance, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Balance), nil
	}
}

func (b balanceDo) FindByPage(offset int, limit int) (result []*model.Balance, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b balanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b balanceDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b balanceDo) Delete(models ...*model.Balance) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *balanceDo) withDO(do gen.Dao) *balanceDo {
	b.DO = *do.(*gen.DO)
	return b
}
