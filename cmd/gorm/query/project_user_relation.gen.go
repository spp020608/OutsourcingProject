// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newProjectUserRelation(db *gorm.DB, opts ...gen.DOOption) projectUserRelation {
	_projectUserRelation := projectUserRelation{}

	_projectUserRelation.projectUserRelationDo.UseDB(db, opts...)
	_projectUserRelation.projectUserRelationDo.UseModel(&model.ProjectUserRelation{})

	tableName := _projectUserRelation.projectUserRelationDo.TableName()
	_projectUserRelation.ALL = field.NewAsterisk(tableName)
	_projectUserRelation.ID = field.NewInt64(tableName, "id")
	_projectUserRelation.ProjectID = field.NewInt64(tableName, "project_id")
	_projectUserRelation.PublishUserID = field.NewInt64(tableName, "publish_user_id")
	_projectUserRelation.ReceiveUserID = field.NewInt64(tableName, "receive_user_id")
	_projectUserRelation.CollectUserID = field.NewInt64(tableName, "collect_user_id")
	_projectUserRelation.CreateTime = field.NewTime(tableName, "create_time")
	_projectUserRelation.IsDeveloper = field.NewInt32(tableName, "is_developer")
	_projectUserRelation.IsCollect = field.NewInt32(tableName, "is_collect")

	_projectUserRelation.fillFieldMap()

	return _projectUserRelation
}

type projectUserRelation struct {
	projectUserRelationDo

	ALL           field.Asterisk
	ID            field.Int64
	ProjectID     field.Int64 // 项目id
	PublishUserID field.Int64 // 发布需求的用户id
	ReceiveUserID field.Int64 // 接受需求的用户id
	CollectUserID field.Int64 // 收藏用户id
	CreateTime    field.Time  // 记录创建时间
	IsDeveloper   field.Int32 // 接单成功(1成功，0未成功，2为拒绝接单)，默认0
	IsCollect     field.Int32 // 是否收藏（1收藏，0未收藏），默认0

	fieldMap map[string]field.Expr
}

func (p projectUserRelation) Table(newTableName string) *projectUserRelation {
	p.projectUserRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectUserRelation) As(alias string) *projectUserRelation {
	p.projectUserRelationDo.DO = *(p.projectUserRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectUserRelation) updateTableName(table string) *projectUserRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.PublishUserID = field.NewInt64(table, "publish_user_id")
	p.ReceiveUserID = field.NewInt64(table, "receive_user_id")
	p.CollectUserID = field.NewInt64(table, "collect_user_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.IsDeveloper = field.NewInt32(table, "is_developer")
	p.IsCollect = field.NewInt32(table, "is_collect")

	p.fillFieldMap()

	return p
}

func (p *projectUserRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectUserRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["publish_user_id"] = p.PublishUserID
	p.fieldMap["receive_user_id"] = p.ReceiveUserID
	p.fieldMap["collect_user_id"] = p.CollectUserID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["is_developer"] = p.IsDeveloper
	p.fieldMap["is_collect"] = p.IsCollect
}

func (p projectUserRelation) clone(db *gorm.DB) projectUserRelation {
	p.projectUserRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectUserRelation) replaceDB(db *gorm.DB) projectUserRelation {
	p.projectUserRelationDo.ReplaceDB(db)
	return p
}

type projectUserRelationDo struct{ gen.DO }

type IProjectUserRelationDo interface {
	gen.SubQuery
	Debug() IProjectUserRelationDo
	WithContext(ctx context.Context) IProjectUserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectUserRelationDo
	WriteDB() IProjectUserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectUserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectUserRelationDo
	Not(conds ...gen.Condition) IProjectUserRelationDo
	Or(conds ...gen.Condition) IProjectUserRelationDo
	Select(conds ...field.Expr) IProjectUserRelationDo
	Where(conds ...gen.Condition) IProjectUserRelationDo
	Order(conds ...field.Expr) IProjectUserRelationDo
	Distinct(cols ...field.Expr) IProjectUserRelationDo
	Omit(cols ...field.Expr) IProjectUserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo
	Group(cols ...field.Expr) IProjectUserRelationDo
	Having(conds ...gen.Condition) IProjectUserRelationDo
	Limit(limit int) IProjectUserRelationDo
	Offset(offset int) IProjectUserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectUserRelationDo
	Unscoped() IProjectUserRelationDo
	Create(values ...*model.ProjectUserRelation) error
	CreateInBatches(values []*model.ProjectUserRelation, batchSize int) error
	Save(values ...*model.ProjectUserRelation) error
	First() (*model.ProjectUserRelation, error)
	Take() (*model.ProjectUserRelation, error)
	Last() (*model.ProjectUserRelation, error)
	Find() ([]*model.ProjectUserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectUserRelation, err error)
	FindInBatches(result *[]*model.ProjectUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectUserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectUserRelationDo
	Assign(attrs ...field.AssignExpr) IProjectUserRelationDo
	Joins(fields ...field.RelationField) IProjectUserRelationDo
	Preload(fields ...field.RelationField) IProjectUserRelationDo
	FirstOrInit() (*model.ProjectUserRelation, error)
	FirstOrCreate() (*model.ProjectUserRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProjectUserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectUserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectUserRelationDo) Debug() IProjectUserRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p projectUserRelationDo) WithContext(ctx context.Context) IProjectUserRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectUserRelationDo) ReadDB() IProjectUserRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectUserRelationDo) WriteDB() IProjectUserRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectUserRelationDo) Session(config *gorm.Session) IProjectUserRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectUserRelationDo) Clauses(conds ...clause.Expression) IProjectUserRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectUserRelationDo) Returning(value interface{}, columns ...string) IProjectUserRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectUserRelationDo) Not(conds ...gen.Condition) IProjectUserRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectUserRelationDo) Or(conds ...gen.Condition) IProjectUserRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectUserRelationDo) Select(conds ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectUserRelationDo) Where(conds ...gen.Condition) IProjectUserRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectUserRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectUserRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectUserRelationDo) Order(conds ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectUserRelationDo) Distinct(cols ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectUserRelationDo) Omit(cols ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectUserRelationDo) Join(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectUserRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectUserRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectUserRelationDo) Group(cols ...field.Expr) IProjectUserRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectUserRelationDo) Having(conds ...gen.Condition) IProjectUserRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectUserRelationDo) Limit(limit int) IProjectUserRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectUserRelationDo) Offset(offset int) IProjectUserRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectUserRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectUserRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectUserRelationDo) Unscoped() IProjectUserRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectUserRelationDo) Create(values ...*model.ProjectUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectUserRelationDo) CreateInBatches(values []*model.ProjectUserRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectUserRelationDo) Save(values ...*model.ProjectUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectUserRelationDo) First() (*model.ProjectUserRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectUserRelation), nil
	}
}

func (p projectUserRelationDo) Take() (*model.ProjectUserRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectUserRelation), nil
	}
}

func (p projectUserRelationDo) Last() (*model.ProjectUserRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectUserRelation), nil
	}
}

func (p projectUserRelationDo) Find() ([]*model.ProjectUserRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectUserRelation), err
}

func (p projectUserRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectUserRelation, err error) {
	buf := make([]*model.ProjectUserRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectUserRelationDo) FindInBatches(result *[]*model.ProjectUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectUserRelationDo) Attrs(attrs ...field.AssignExpr) IProjectUserRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectUserRelationDo) Assign(attrs ...field.AssignExpr) IProjectUserRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectUserRelationDo) Joins(fields ...field.RelationField) IProjectUserRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectUserRelationDo) Preload(fields ...field.RelationField) IProjectUserRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectUserRelationDo) FirstOrInit() (*model.ProjectUserRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectUserRelation), nil
	}
}

func (p projectUserRelationDo) FirstOrCreate() (*model.ProjectUserRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectUserRelation), nil
	}
}

func (p projectUserRelationDo) FindByPage(offset int, limit int) (result []*model.ProjectUserRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectUserRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectUserRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectUserRelationDo) Delete(models ...*model.ProjectUserRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectUserRelationDo) withDO(do gen.Dao) *projectUserRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
