// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newSkillType(db *gorm.DB, opts ...gen.DOOption) skillType {
	_skillType := skillType{}

	_skillType.skillTypeDo.UseDB(db, opts...)
	_skillType.skillTypeDo.UseModel(&model.SkillType{})

	tableName := _skillType.skillTypeDo.TableName()
	_skillType.ALL = field.NewAsterisk(tableName)
	_skillType.ID = field.NewInt64(tableName, "id")
	_skillType.SkillName = field.NewString(tableName, "skill_name")
	_skillType.SkillExplain = field.NewString(tableName, "skill_explain")
	_skillType.CreateTime = field.NewTime(tableName, "create_time")

	_skillType.fillFieldMap()

	return _skillType
}

type skillType struct {
	skillTypeDo

	ALL          field.Asterisk
	ID           field.Int64
	SkillName    field.String // 技能名字
	SkillExplain field.String // 技能描述
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (s skillType) Table(newTableName string) *skillType {
	s.skillTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skillType) As(alias string) *skillType {
	s.skillTypeDo.DO = *(s.skillTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skillType) updateTableName(table string) *skillType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SkillName = field.NewString(table, "skill_name")
	s.SkillExplain = field.NewString(table, "skill_explain")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *skillType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skillType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["skill_name"] = s.SkillName
	s.fieldMap["skill_explain"] = s.SkillExplain
	s.fieldMap["create_time"] = s.CreateTime
}

func (s skillType) clone(db *gorm.DB) skillType {
	s.skillTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skillType) replaceDB(db *gorm.DB) skillType {
	s.skillTypeDo.ReplaceDB(db)
	return s
}

type skillTypeDo struct{ gen.DO }

type ISkillTypeDo interface {
	gen.SubQuery
	Debug() ISkillTypeDo
	WithContext(ctx context.Context) ISkillTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISkillTypeDo
	WriteDB() ISkillTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISkillTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISkillTypeDo
	Not(conds ...gen.Condition) ISkillTypeDo
	Or(conds ...gen.Condition) ISkillTypeDo
	Select(conds ...field.Expr) ISkillTypeDo
	Where(conds ...gen.Condition) ISkillTypeDo
	Order(conds ...field.Expr) ISkillTypeDo
	Distinct(cols ...field.Expr) ISkillTypeDo
	Omit(cols ...field.Expr) ISkillTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISkillTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISkillTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISkillTypeDo
	Group(cols ...field.Expr) ISkillTypeDo
	Having(conds ...gen.Condition) ISkillTypeDo
	Limit(limit int) ISkillTypeDo
	Offset(offset int) ISkillTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISkillTypeDo
	Unscoped() ISkillTypeDo
	Create(values ...*model.SkillType) error
	CreateInBatches(values []*model.SkillType, batchSize int) error
	Save(values ...*model.SkillType) error
	First() (*model.SkillType, error)
	Take() (*model.SkillType, error)
	Last() (*model.SkillType, error)
	Find() ([]*model.SkillType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SkillType, err error)
	FindInBatches(result *[]*model.SkillType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SkillType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISkillTypeDo
	Assign(attrs ...field.AssignExpr) ISkillTypeDo
	Joins(fields ...field.RelationField) ISkillTypeDo
	Preload(fields ...field.RelationField) ISkillTypeDo
	FirstOrInit() (*model.SkillType, error)
	FirstOrCreate() (*model.SkillType, error)
	FindByPage(offset int, limit int) (result []*model.SkillType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISkillTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s skillTypeDo) Debug() ISkillTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s skillTypeDo) WithContext(ctx context.Context) ISkillTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skillTypeDo) ReadDB() ISkillTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s skillTypeDo) WriteDB() ISkillTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s skillTypeDo) Session(config *gorm.Session) ISkillTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s skillTypeDo) Clauses(conds ...clause.Expression) ISkillTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skillTypeDo) Returning(value interface{}, columns ...string) ISkillTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skillTypeDo) Not(conds ...gen.Condition) ISkillTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skillTypeDo) Or(conds ...gen.Condition) ISkillTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skillTypeDo) Select(conds ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skillTypeDo) Where(conds ...gen.Condition) ISkillTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skillTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISkillTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s skillTypeDo) Order(conds ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skillTypeDo) Distinct(cols ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skillTypeDo) Omit(cols ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skillTypeDo) Join(table schema.Tabler, on ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skillTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skillTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skillTypeDo) Group(cols ...field.Expr) ISkillTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skillTypeDo) Having(conds ...gen.Condition) ISkillTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skillTypeDo) Limit(limit int) ISkillTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skillTypeDo) Offset(offset int) ISkillTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skillTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISkillTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skillTypeDo) Unscoped() ISkillTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skillTypeDo) Create(values ...*model.SkillType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skillTypeDo) CreateInBatches(values []*model.SkillType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skillTypeDo) Save(values ...*model.SkillType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skillTypeDo) First() (*model.SkillType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkillType), nil
	}
}

func (s skillTypeDo) Take() (*model.SkillType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkillType), nil
	}
}

func (s skillTypeDo) Last() (*model.SkillType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkillType), nil
	}
}

func (s skillTypeDo) Find() ([]*model.SkillType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SkillType), err
}

func (s skillTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SkillType, err error) {
	buf := make([]*model.SkillType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skillTypeDo) FindInBatches(result *[]*model.SkillType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skillTypeDo) Attrs(attrs ...field.AssignExpr) ISkillTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skillTypeDo) Assign(attrs ...field.AssignExpr) ISkillTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skillTypeDo) Joins(fields ...field.RelationField) ISkillTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skillTypeDo) Preload(fields ...field.RelationField) ISkillTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skillTypeDo) FirstOrInit() (*model.SkillType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkillType), nil
	}
}

func (s skillTypeDo) FirstOrCreate() (*model.SkillType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkillType), nil
	}
}

func (s skillTypeDo) FindByPage(offset int, limit int) (result []*model.SkillType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skillTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skillTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skillTypeDo) Delete(models ...*model.SkillType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skillTypeDo) withDO(do gen.Dao) *skillTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
