// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                           = new(Query)
	Balance                     *balance
	FileType                    *fileType
	ImageType                   *imageType
	PositionType                *positionType
	Project                     *project
	ProjectFile                 *projectFile
	ProjectNotPlatform          *projectNotPlatform
	ProjectPositionTypeRelation *projectPositionTypeRelation
	ProjectScheduleRelation     *projectScheduleRelation
	ProjectType                 *projectType
	ProjectTypeRelation         *projectTypeRelation
	ProjectUserRelation         *projectUserRelation
	Schedule                    *schedule
	SkillType                   *skillType
	User                        *user
	UserEducation               *userEducation
	UserImage                   *userImage
	UserPositionTypeRelation    *userPositionTypeRelation
	UserSkillTypeRelation       *userSkillTypeRelation
	UserWork                    *userWork
	WorkState                   *workState
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Balance = &Q.Balance
	FileType = &Q.FileType
	ImageType = &Q.ImageType
	PositionType = &Q.PositionType
	Project = &Q.Project
	ProjectFile = &Q.ProjectFile
	ProjectNotPlatform = &Q.ProjectNotPlatform
	ProjectPositionTypeRelation = &Q.ProjectPositionTypeRelation
	ProjectScheduleRelation = &Q.ProjectScheduleRelation
	ProjectType = &Q.ProjectType
	ProjectTypeRelation = &Q.ProjectTypeRelation
	ProjectUserRelation = &Q.ProjectUserRelation
	Schedule = &Q.Schedule
	SkillType = &Q.SkillType
	User = &Q.User
	UserEducation = &Q.UserEducation
	UserImage = &Q.UserImage
	UserPositionTypeRelation = &Q.UserPositionTypeRelation
	UserSkillTypeRelation = &Q.UserSkillTypeRelation
	UserWork = &Q.UserWork
	WorkState = &Q.WorkState
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		Balance:                     newBalance(db, opts...),
		FileType:                    newFileType(db, opts...),
		ImageType:                   newImageType(db, opts...),
		PositionType:                newPositionType(db, opts...),
		Project:                     newProject(db, opts...),
		ProjectFile:                 newProjectFile(db, opts...),
		ProjectNotPlatform:          newProjectNotPlatform(db, opts...),
		ProjectPositionTypeRelation: newProjectPositionTypeRelation(db, opts...),
		ProjectScheduleRelation:     newProjectScheduleRelation(db, opts...),
		ProjectType:                 newProjectType(db, opts...),
		ProjectTypeRelation:         newProjectTypeRelation(db, opts...),
		ProjectUserRelation:         newProjectUserRelation(db, opts...),
		Schedule:                    newSchedule(db, opts...),
		SkillType:                   newSkillType(db, opts...),
		User:                        newUser(db, opts...),
		UserEducation:               newUserEducation(db, opts...),
		UserImage:                   newUserImage(db, opts...),
		UserPositionTypeRelation:    newUserPositionTypeRelation(db, opts...),
		UserSkillTypeRelation:       newUserSkillTypeRelation(db, opts...),
		UserWork:                    newUserWork(db, opts...),
		WorkState:                   newWorkState(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Balance                     balance
	FileType                    fileType
	ImageType                   imageType
	PositionType                positionType
	Project                     project
	ProjectFile                 projectFile
	ProjectNotPlatform          projectNotPlatform
	ProjectPositionTypeRelation projectPositionTypeRelation
	ProjectScheduleRelation     projectScheduleRelation
	ProjectType                 projectType
	ProjectTypeRelation         projectTypeRelation
	ProjectUserRelation         projectUserRelation
	Schedule                    schedule
	SkillType                   skillType
	User                        user
	UserEducation               userEducation
	UserImage                   userImage
	UserPositionTypeRelation    userPositionTypeRelation
	UserSkillTypeRelation       userSkillTypeRelation
	UserWork                    userWork
	WorkState                   workState
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Balance:                     q.Balance.clone(db),
		FileType:                    q.FileType.clone(db),
		ImageType:                   q.ImageType.clone(db),
		PositionType:                q.PositionType.clone(db),
		Project:                     q.Project.clone(db),
		ProjectFile:                 q.ProjectFile.clone(db),
		ProjectNotPlatform:          q.ProjectNotPlatform.clone(db),
		ProjectPositionTypeRelation: q.ProjectPositionTypeRelation.clone(db),
		ProjectScheduleRelation:     q.ProjectScheduleRelation.clone(db),
		ProjectType:                 q.ProjectType.clone(db),
		ProjectTypeRelation:         q.ProjectTypeRelation.clone(db),
		ProjectUserRelation:         q.ProjectUserRelation.clone(db),
		Schedule:                    q.Schedule.clone(db),
		SkillType:                   q.SkillType.clone(db),
		User:                        q.User.clone(db),
		UserEducation:               q.UserEducation.clone(db),
		UserImage:                   q.UserImage.clone(db),
		UserPositionTypeRelation:    q.UserPositionTypeRelation.clone(db),
		UserSkillTypeRelation:       q.UserSkillTypeRelation.clone(db),
		UserWork:                    q.UserWork.clone(db),
		WorkState:                   q.WorkState.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Balance:                     q.Balance.replaceDB(db),
		FileType:                    q.FileType.replaceDB(db),
		ImageType:                   q.ImageType.replaceDB(db),
		PositionType:                q.PositionType.replaceDB(db),
		Project:                     q.Project.replaceDB(db),
		ProjectFile:                 q.ProjectFile.replaceDB(db),
		ProjectNotPlatform:          q.ProjectNotPlatform.replaceDB(db),
		ProjectPositionTypeRelation: q.ProjectPositionTypeRelation.replaceDB(db),
		ProjectScheduleRelation:     q.ProjectScheduleRelation.replaceDB(db),
		ProjectType:                 q.ProjectType.replaceDB(db),
		ProjectTypeRelation:         q.ProjectTypeRelation.replaceDB(db),
		ProjectUserRelation:         q.ProjectUserRelation.replaceDB(db),
		Schedule:                    q.Schedule.replaceDB(db),
		SkillType:                   q.SkillType.replaceDB(db),
		User:                        q.User.replaceDB(db),
		UserEducation:               q.UserEducation.replaceDB(db),
		UserImage:                   q.UserImage.replaceDB(db),
		UserPositionTypeRelation:    q.UserPositionTypeRelation.replaceDB(db),
		UserSkillTypeRelation:       q.UserSkillTypeRelation.replaceDB(db),
		UserWork:                    q.UserWork.replaceDB(db),
		WorkState:                   q.WorkState.replaceDB(db),
	}
}

type queryCtx struct {
	Balance                     IBalanceDo
	FileType                    IFileTypeDo
	ImageType                   IImageTypeDo
	PositionType                IPositionTypeDo
	Project                     IProjectDo
	ProjectFile                 IProjectFileDo
	ProjectNotPlatform          IProjectNotPlatformDo
	ProjectPositionTypeRelation IProjectPositionTypeRelationDo
	ProjectScheduleRelation     IProjectScheduleRelationDo
	ProjectType                 IProjectTypeDo
	ProjectTypeRelation         IProjectTypeRelationDo
	ProjectUserRelation         IProjectUserRelationDo
	Schedule                    IScheduleDo
	SkillType                   ISkillTypeDo
	User                        IUserDo
	UserEducation               IUserEducationDo
	UserImage                   IUserImageDo
	UserPositionTypeRelation    IUserPositionTypeRelationDo
	UserSkillTypeRelation       IUserSkillTypeRelationDo
	UserWork                    IUserWorkDo
	WorkState                   IWorkStateDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Balance:                     q.Balance.WithContext(ctx),
		FileType:                    q.FileType.WithContext(ctx),
		ImageType:                   q.ImageType.WithContext(ctx),
		PositionType:                q.PositionType.WithContext(ctx),
		Project:                     q.Project.WithContext(ctx),
		ProjectFile:                 q.ProjectFile.WithContext(ctx),
		ProjectNotPlatform:          q.ProjectNotPlatform.WithContext(ctx),
		ProjectPositionTypeRelation: q.ProjectPositionTypeRelation.WithContext(ctx),
		ProjectScheduleRelation:     q.ProjectScheduleRelation.WithContext(ctx),
		ProjectType:                 q.ProjectType.WithContext(ctx),
		ProjectTypeRelation:         q.ProjectTypeRelation.WithContext(ctx),
		ProjectUserRelation:         q.ProjectUserRelation.WithContext(ctx),
		Schedule:                    q.Schedule.WithContext(ctx),
		SkillType:                   q.SkillType.WithContext(ctx),
		User:                        q.User.WithContext(ctx),
		UserEducation:               q.UserEducation.WithContext(ctx),
		UserImage:                   q.UserImage.WithContext(ctx),
		UserPositionTypeRelation:    q.UserPositionTypeRelation.WithContext(ctx),
		UserSkillTypeRelation:       q.UserSkillTypeRelation.WithContext(ctx),
		UserWork:                    q.UserWork.WithContext(ctx),
		WorkState:                   q.WorkState.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
