// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newUserSkillTypeRelation(db *gorm.DB, opts ...gen.DOOption) userSkillTypeRelation {
	_userSkillTypeRelation := userSkillTypeRelation{}

	_userSkillTypeRelation.userSkillTypeRelationDo.UseDB(db, opts...)
	_userSkillTypeRelation.userSkillTypeRelationDo.UseModel(&model.UserSkillTypeRelation{})

	tableName := _userSkillTypeRelation.userSkillTypeRelationDo.TableName()
	_userSkillTypeRelation.ALL = field.NewAsterisk(tableName)
	_userSkillTypeRelation.ID = field.NewInt64(tableName, "id")
	_userSkillTypeRelation.UserID = field.NewInt64(tableName, "user_id")
	_userSkillTypeRelation.SkillID = field.NewInt64(tableName, "skill_id")
	_userSkillTypeRelation.CreateTime = field.NewTime(tableName, "create_time")

	_userSkillTypeRelation.fillFieldMap()

	return _userSkillTypeRelation
}

type userSkillTypeRelation struct {
	userSkillTypeRelationDo

	ALL        field.Asterisk
	ID         field.Int64 // 自增 ID
	UserID     field.Int64 // 用户 ID
	SkillID    field.Int64 // 技能 ID
	CreateTime field.Time  // 记录创建时间

	fieldMap map[string]field.Expr
}

func (u userSkillTypeRelation) Table(newTableName string) *userSkillTypeRelation {
	u.userSkillTypeRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSkillTypeRelation) As(alias string) *userSkillTypeRelation {
	u.userSkillTypeRelationDo.DO = *(u.userSkillTypeRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSkillTypeRelation) updateTableName(table string) *userSkillTypeRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.SkillID = field.NewInt64(table, "skill_id")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *userSkillTypeRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSkillTypeRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["skill_id"] = u.SkillID
	u.fieldMap["create_time"] = u.CreateTime
}

func (u userSkillTypeRelation) clone(db *gorm.DB) userSkillTypeRelation {
	u.userSkillTypeRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSkillTypeRelation) replaceDB(db *gorm.DB) userSkillTypeRelation {
	u.userSkillTypeRelationDo.ReplaceDB(db)
	return u
}

type userSkillTypeRelationDo struct{ gen.DO }

type IUserSkillTypeRelationDo interface {
	gen.SubQuery
	Debug() IUserSkillTypeRelationDo
	WithContext(ctx context.Context) IUserSkillTypeRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSkillTypeRelationDo
	WriteDB() IUserSkillTypeRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSkillTypeRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSkillTypeRelationDo
	Not(conds ...gen.Condition) IUserSkillTypeRelationDo
	Or(conds ...gen.Condition) IUserSkillTypeRelationDo
	Select(conds ...field.Expr) IUserSkillTypeRelationDo
	Where(conds ...gen.Condition) IUserSkillTypeRelationDo
	Order(conds ...field.Expr) IUserSkillTypeRelationDo
	Distinct(cols ...field.Expr) IUserSkillTypeRelationDo
	Omit(cols ...field.Expr) IUserSkillTypeRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo
	Group(cols ...field.Expr) IUserSkillTypeRelationDo
	Having(conds ...gen.Condition) IUserSkillTypeRelationDo
	Limit(limit int) IUserSkillTypeRelationDo
	Offset(offset int) IUserSkillTypeRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSkillTypeRelationDo
	Unscoped() IUserSkillTypeRelationDo
	Create(values ...*model.UserSkillTypeRelation) error
	CreateInBatches(values []*model.UserSkillTypeRelation, batchSize int) error
	Save(values ...*model.UserSkillTypeRelation) error
	First() (*model.UserSkillTypeRelation, error)
	Take() (*model.UserSkillTypeRelation, error)
	Last() (*model.UserSkillTypeRelation, error)
	Find() ([]*model.UserSkillTypeRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSkillTypeRelation, err error)
	FindInBatches(result *[]*model.UserSkillTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSkillTypeRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSkillTypeRelationDo
	Assign(attrs ...field.AssignExpr) IUserSkillTypeRelationDo
	Joins(fields ...field.RelationField) IUserSkillTypeRelationDo
	Preload(fields ...field.RelationField) IUserSkillTypeRelationDo
	FirstOrInit() (*model.UserSkillTypeRelation, error)
	FirstOrCreate() (*model.UserSkillTypeRelation, error)
	FindByPage(offset int, limit int) (result []*model.UserSkillTypeRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSkillTypeRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSkillTypeRelationDo) Debug() IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userSkillTypeRelationDo) WithContext(ctx context.Context) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSkillTypeRelationDo) ReadDB() IUserSkillTypeRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSkillTypeRelationDo) WriteDB() IUserSkillTypeRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSkillTypeRelationDo) Session(config *gorm.Session) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSkillTypeRelationDo) Clauses(conds ...clause.Expression) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSkillTypeRelationDo) Returning(value interface{}, columns ...string) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSkillTypeRelationDo) Not(conds ...gen.Condition) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSkillTypeRelationDo) Or(conds ...gen.Condition) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSkillTypeRelationDo) Select(conds ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSkillTypeRelationDo) Where(conds ...gen.Condition) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSkillTypeRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserSkillTypeRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userSkillTypeRelationDo) Order(conds ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSkillTypeRelationDo) Distinct(cols ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSkillTypeRelationDo) Omit(cols ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSkillTypeRelationDo) Join(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSkillTypeRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSkillTypeRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSkillTypeRelationDo) Group(cols ...field.Expr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSkillTypeRelationDo) Having(conds ...gen.Condition) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSkillTypeRelationDo) Limit(limit int) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSkillTypeRelationDo) Offset(offset int) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSkillTypeRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSkillTypeRelationDo) Unscoped() IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSkillTypeRelationDo) Create(values ...*model.UserSkillTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSkillTypeRelationDo) CreateInBatches(values []*model.UserSkillTypeRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSkillTypeRelationDo) Save(values ...*model.UserSkillTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSkillTypeRelationDo) First() (*model.UserSkillTypeRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSkillTypeRelation), nil
	}
}

func (u userSkillTypeRelationDo) Take() (*model.UserSkillTypeRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSkillTypeRelation), nil
	}
}

func (u userSkillTypeRelationDo) Last() (*model.UserSkillTypeRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSkillTypeRelation), nil
	}
}

func (u userSkillTypeRelationDo) Find() ([]*model.UserSkillTypeRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSkillTypeRelation), err
}

func (u userSkillTypeRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSkillTypeRelation, err error) {
	buf := make([]*model.UserSkillTypeRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSkillTypeRelationDo) FindInBatches(result *[]*model.UserSkillTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSkillTypeRelationDo) Attrs(attrs ...field.AssignExpr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSkillTypeRelationDo) Assign(attrs ...field.AssignExpr) IUserSkillTypeRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSkillTypeRelationDo) Joins(fields ...field.RelationField) IUserSkillTypeRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSkillTypeRelationDo) Preload(fields ...field.RelationField) IUserSkillTypeRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSkillTypeRelationDo) FirstOrInit() (*model.UserSkillTypeRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSkillTypeRelation), nil
	}
}

func (u userSkillTypeRelationDo) FirstOrCreate() (*model.UserSkillTypeRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSkillTypeRelation), nil
	}
}

func (u userSkillTypeRelationDo) FindByPage(offset int, limit int) (result []*model.UserSkillTypeRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSkillTypeRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSkillTypeRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSkillTypeRelationDo) Delete(models ...*model.UserSkillTypeRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSkillTypeRelationDo) withDO(do gen.Dao) *userSkillTypeRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
