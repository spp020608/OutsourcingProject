// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newProjectType(db *gorm.DB, opts ...gen.DOOption) projectType {
	_projectType := projectType{}

	_projectType.projectTypeDo.UseDB(db, opts...)
	_projectType.projectTypeDo.UseModel(&model.ProjectType{})

	tableName := _projectType.projectTypeDo.TableName()
	_projectType.ALL = field.NewAsterisk(tableName)
	_projectType.ID = field.NewInt64(tableName, "id")
	_projectType.TypeName = field.NewString(tableName, "type_name")
	_projectType.TypeExplain = field.NewString(tableName, "type_explain")
	_projectType.CreateTime = field.NewTime(tableName, "create_time")

	_projectType.fillFieldMap()

	return _projectType
}

type projectType struct {
	projectTypeDo

	ALL         field.Asterisk
	ID          field.Int64
	TypeName    field.String // 项目类型
	TypeExplain field.String // 类型说明
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (p projectType) Table(newTableName string) *projectType {
	p.projectTypeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectType) As(alias string) *projectType {
	p.projectTypeDo.DO = *(p.projectTypeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectType) updateTableName(table string) *projectType {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.TypeName = field.NewString(table, "type_name")
	p.TypeExplain = field.NewString(table, "type_explain")
	p.CreateTime = field.NewTime(table, "create_time")

	p.fillFieldMap()

	return p
}

func (p *projectType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectType) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["type_name"] = p.TypeName
	p.fieldMap["type_explain"] = p.TypeExplain
	p.fieldMap["create_time"] = p.CreateTime
}

func (p projectType) clone(db *gorm.DB) projectType {
	p.projectTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectType) replaceDB(db *gorm.DB) projectType {
	p.projectTypeDo.ReplaceDB(db)
	return p
}

type projectTypeDo struct{ gen.DO }

type IProjectTypeDo interface {
	gen.SubQuery
	Debug() IProjectTypeDo
	WithContext(ctx context.Context) IProjectTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTypeDo
	WriteDB() IProjectTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTypeDo
	Not(conds ...gen.Condition) IProjectTypeDo
	Or(conds ...gen.Condition) IProjectTypeDo
	Select(conds ...field.Expr) IProjectTypeDo
	Where(conds ...gen.Condition) IProjectTypeDo
	Order(conds ...field.Expr) IProjectTypeDo
	Distinct(cols ...field.Expr) IProjectTypeDo
	Omit(cols ...field.Expr) IProjectTypeDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTypeDo
	Group(cols ...field.Expr) IProjectTypeDo
	Having(conds ...gen.Condition) IProjectTypeDo
	Limit(limit int) IProjectTypeDo
	Offset(offset int) IProjectTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTypeDo
	Unscoped() IProjectTypeDo
	Create(values ...*model.ProjectType) error
	CreateInBatches(values []*model.ProjectType, batchSize int) error
	Save(values ...*model.ProjectType) error
	First() (*model.ProjectType, error)
	Take() (*model.ProjectType, error)
	Last() (*model.ProjectType, error)
	Find() ([]*model.ProjectType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectType, err error)
	FindInBatches(result *[]*model.ProjectType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTypeDo
	Assign(attrs ...field.AssignExpr) IProjectTypeDo
	Joins(fields ...field.RelationField) IProjectTypeDo
	Preload(fields ...field.RelationField) IProjectTypeDo
	FirstOrInit() (*model.ProjectType, error)
	FirstOrCreate() (*model.ProjectType, error)
	FindByPage(offset int, limit int) (result []*model.ProjectType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTypeDo) Debug() IProjectTypeDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTypeDo) WithContext(ctx context.Context) IProjectTypeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTypeDo) ReadDB() IProjectTypeDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTypeDo) WriteDB() IProjectTypeDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTypeDo) Session(config *gorm.Session) IProjectTypeDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTypeDo) Clauses(conds ...clause.Expression) IProjectTypeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTypeDo) Returning(value interface{}, columns ...string) IProjectTypeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTypeDo) Not(conds ...gen.Condition) IProjectTypeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTypeDo) Or(conds ...gen.Condition) IProjectTypeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTypeDo) Select(conds ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTypeDo) Where(conds ...gen.Condition) IProjectTypeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectTypeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectTypeDo) Order(conds ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTypeDo) Distinct(cols ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTypeDo) Omit(cols ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTypeDo) Join(table schema.Tabler, on ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTypeDo) Group(cols ...field.Expr) IProjectTypeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTypeDo) Having(conds ...gen.Condition) IProjectTypeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTypeDo) Limit(limit int) IProjectTypeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTypeDo) Offset(offset int) IProjectTypeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTypeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTypeDo) Unscoped() IProjectTypeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTypeDo) Create(values ...*model.ProjectType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTypeDo) CreateInBatches(values []*model.ProjectType, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTypeDo) Save(values ...*model.ProjectType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTypeDo) First() (*model.ProjectType, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectType), nil
	}
}

func (p projectTypeDo) Take() (*model.ProjectType, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectType), nil
	}
}

func (p projectTypeDo) Last() (*model.ProjectType, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectType), nil
	}
}

func (p projectTypeDo) Find() ([]*model.ProjectType, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectType), err
}

func (p projectTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectType, err error) {
	buf := make([]*model.ProjectType, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTypeDo) FindInBatches(result *[]*model.ProjectType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTypeDo) Attrs(attrs ...field.AssignExpr) IProjectTypeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTypeDo) Assign(attrs ...field.AssignExpr) IProjectTypeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTypeDo) Joins(fields ...field.RelationField) IProjectTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTypeDo) Preload(fields ...field.RelationField) IProjectTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTypeDo) FirstOrInit() (*model.ProjectType, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectType), nil
	}
}

func (p projectTypeDo) FirstOrCreate() (*model.ProjectType, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectType), nil
	}
}

func (p projectTypeDo) FindByPage(offset int, limit int) (result []*model.ProjectType, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTypeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTypeDo) Delete(models ...*model.ProjectType) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTypeDo) withDO(do gen.Dao) *projectTypeDo {
	p.DO = *do.(*gen.DO)
	return p
}
