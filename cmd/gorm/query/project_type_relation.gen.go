// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newProjectTypeRelation(db *gorm.DB, opts ...gen.DOOption) projectTypeRelation {
	_projectTypeRelation := projectTypeRelation{}

	_projectTypeRelation.projectTypeRelationDo.UseDB(db, opts...)
	_projectTypeRelation.projectTypeRelationDo.UseModel(&model.ProjectTypeRelation{})

	tableName := _projectTypeRelation.projectTypeRelationDo.TableName()
	_projectTypeRelation.ALL = field.NewAsterisk(tableName)
	_projectTypeRelation.ID = field.NewInt64(tableName, "id")
	_projectTypeRelation.ProjectID = field.NewInt64(tableName, "project_id")
	_projectTypeRelation.ProjectTypeID = field.NewInt64(tableName, "project_type_id")

	_projectTypeRelation.fillFieldMap()

	return _projectTypeRelation
}

type projectTypeRelation struct {
	projectTypeRelationDo

	ALL           field.Asterisk
	ID            field.Int64 // 关联表自增ID
	ProjectID     field.Int64 // 项目ID，对应project表中的id
	ProjectTypeID field.Int64 // 项目类型ID，对应project_type表中的id

	fieldMap map[string]field.Expr
}

func (p projectTypeRelation) Table(newTableName string) *projectTypeRelation {
	p.projectTypeRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTypeRelation) As(alias string) *projectTypeRelation {
	p.projectTypeRelationDo.DO = *(p.projectTypeRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTypeRelation) updateTableName(table string) *projectTypeRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.ProjectTypeID = field.NewInt64(table, "project_type_id")

	p.fillFieldMap()

	return p
}

func (p *projectTypeRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTypeRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["project_type_id"] = p.ProjectTypeID
}

func (p projectTypeRelation) clone(db *gorm.DB) projectTypeRelation {
	p.projectTypeRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTypeRelation) replaceDB(db *gorm.DB) projectTypeRelation {
	p.projectTypeRelationDo.ReplaceDB(db)
	return p
}

type projectTypeRelationDo struct{ gen.DO }

type IProjectTypeRelationDo interface {
	gen.SubQuery
	Debug() IProjectTypeRelationDo
	WithContext(ctx context.Context) IProjectTypeRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTypeRelationDo
	WriteDB() IProjectTypeRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTypeRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTypeRelationDo
	Not(conds ...gen.Condition) IProjectTypeRelationDo
	Or(conds ...gen.Condition) IProjectTypeRelationDo
	Select(conds ...field.Expr) IProjectTypeRelationDo
	Where(conds ...gen.Condition) IProjectTypeRelationDo
	Order(conds ...field.Expr) IProjectTypeRelationDo
	Distinct(cols ...field.Expr) IProjectTypeRelationDo
	Omit(cols ...field.Expr) IProjectTypeRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo
	Group(cols ...field.Expr) IProjectTypeRelationDo
	Having(conds ...gen.Condition) IProjectTypeRelationDo
	Limit(limit int) IProjectTypeRelationDo
	Offset(offset int) IProjectTypeRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTypeRelationDo
	Unscoped() IProjectTypeRelationDo
	Create(values ...*model.ProjectTypeRelation) error
	CreateInBatches(values []*model.ProjectTypeRelation, batchSize int) error
	Save(values ...*model.ProjectTypeRelation) error
	First() (*model.ProjectTypeRelation, error)
	Take() (*model.ProjectTypeRelation, error)
	Last() (*model.ProjectTypeRelation, error)
	Find() ([]*model.ProjectTypeRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTypeRelation, err error)
	FindInBatches(result *[]*model.ProjectTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTypeRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTypeRelationDo
	Assign(attrs ...field.AssignExpr) IProjectTypeRelationDo
	Joins(fields ...field.RelationField) IProjectTypeRelationDo
	Preload(fields ...field.RelationField) IProjectTypeRelationDo
	FirstOrInit() (*model.ProjectTypeRelation, error)
	FirstOrCreate() (*model.ProjectTypeRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTypeRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTypeRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTypeRelationDo) Debug() IProjectTypeRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTypeRelationDo) WithContext(ctx context.Context) IProjectTypeRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTypeRelationDo) ReadDB() IProjectTypeRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTypeRelationDo) WriteDB() IProjectTypeRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTypeRelationDo) Session(config *gorm.Session) IProjectTypeRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTypeRelationDo) Clauses(conds ...clause.Expression) IProjectTypeRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTypeRelationDo) Returning(value interface{}, columns ...string) IProjectTypeRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTypeRelationDo) Not(conds ...gen.Condition) IProjectTypeRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTypeRelationDo) Or(conds ...gen.Condition) IProjectTypeRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTypeRelationDo) Select(conds ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTypeRelationDo) Where(conds ...gen.Condition) IProjectTypeRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTypeRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectTypeRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectTypeRelationDo) Order(conds ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTypeRelationDo) Distinct(cols ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTypeRelationDo) Omit(cols ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTypeRelationDo) Join(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTypeRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTypeRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTypeRelationDo) Group(cols ...field.Expr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTypeRelationDo) Having(conds ...gen.Condition) IProjectTypeRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTypeRelationDo) Limit(limit int) IProjectTypeRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTypeRelationDo) Offset(offset int) IProjectTypeRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTypeRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTypeRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTypeRelationDo) Unscoped() IProjectTypeRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTypeRelationDo) Create(values ...*model.ProjectTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTypeRelationDo) CreateInBatches(values []*model.ProjectTypeRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTypeRelationDo) Save(values ...*model.ProjectTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTypeRelationDo) First() (*model.ProjectTypeRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTypeRelation), nil
	}
}

func (p projectTypeRelationDo) Take() (*model.ProjectTypeRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTypeRelation), nil
	}
}

func (p projectTypeRelationDo) Last() (*model.ProjectTypeRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTypeRelation), nil
	}
}

func (p projectTypeRelationDo) Find() ([]*model.ProjectTypeRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTypeRelation), err
}

func (p projectTypeRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTypeRelation, err error) {
	buf := make([]*model.ProjectTypeRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTypeRelationDo) FindInBatches(result *[]*model.ProjectTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTypeRelationDo) Attrs(attrs ...field.AssignExpr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTypeRelationDo) Assign(attrs ...field.AssignExpr) IProjectTypeRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTypeRelationDo) Joins(fields ...field.RelationField) IProjectTypeRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTypeRelationDo) Preload(fields ...field.RelationField) IProjectTypeRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTypeRelationDo) FirstOrInit() (*model.ProjectTypeRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTypeRelation), nil
	}
}

func (p projectTypeRelationDo) FirstOrCreate() (*model.ProjectTypeRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTypeRelation), nil
	}
}

func (p projectTypeRelationDo) FindByPage(offset int, limit int) (result []*model.ProjectTypeRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTypeRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTypeRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTypeRelationDo) Delete(models ...*model.ProjectTypeRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTypeRelationDo) withDO(do gen.Dao) *projectTypeRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
