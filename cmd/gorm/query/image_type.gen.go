// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newImageType(db *gorm.DB, opts ...gen.DOOption) imageType {
	_imageType := imageType{}

	_imageType.imageTypeDo.UseDB(db, opts...)
	_imageType.imageTypeDo.UseModel(&model.ImageType{})

	tableName := _imageType.imageTypeDo.TableName()
	_imageType.ALL = field.NewAsterisk(tableName)
	_imageType.ID = field.NewInt64(tableName, "id")
	_imageType.TypeName = field.NewString(tableName, "type_name")
	_imageType.CreateTime = field.NewTime(tableName, "create_time")

	_imageType.fillFieldMap()

	return _imageType
}

type imageType struct {
	imageTypeDo

	ALL        field.Asterisk
	ID         field.Int64  // 图片类型 ID、自增
	TypeName   field.String // 图片类型名称
	CreateTime field.Time   // 记录创建时间

	fieldMap map[string]field.Expr
}

func (i imageType) Table(newTableName string) *imageType {
	i.imageTypeDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imageType) As(alias string) *imageType {
	i.imageTypeDo.DO = *(i.imageTypeDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imageType) updateTableName(table string) *imageType {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.TypeName = field.NewString(table, "type_name")
	i.CreateTime = field.NewTime(table, "create_time")

	i.fillFieldMap()

	return i
}

func (i *imageType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imageType) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["id"] = i.ID
	i.fieldMap["type_name"] = i.TypeName
	i.fieldMap["create_time"] = i.CreateTime
}

func (i imageType) clone(db *gorm.DB) imageType {
	i.imageTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imageType) replaceDB(db *gorm.DB) imageType {
	i.imageTypeDo.ReplaceDB(db)
	return i
}

type imageTypeDo struct{ gen.DO }

type IImageTypeDo interface {
	gen.SubQuery
	Debug() IImageTypeDo
	WithContext(ctx context.Context) IImageTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IImageTypeDo
	WriteDB() IImageTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IImageTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IImageTypeDo
	Not(conds ...gen.Condition) IImageTypeDo
	Or(conds ...gen.Condition) IImageTypeDo
	Select(conds ...field.Expr) IImageTypeDo
	Where(conds ...gen.Condition) IImageTypeDo
	Order(conds ...field.Expr) IImageTypeDo
	Distinct(cols ...field.Expr) IImageTypeDo
	Omit(cols ...field.Expr) IImageTypeDo
	Join(table schema.Tabler, on ...field.Expr) IImageTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IImageTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IImageTypeDo
	Group(cols ...field.Expr) IImageTypeDo
	Having(conds ...gen.Condition) IImageTypeDo
	Limit(limit int) IImageTypeDo
	Offset(offset int) IImageTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IImageTypeDo
	Unscoped() IImageTypeDo
	Create(values ...*model.ImageType) error
	CreateInBatches(values []*model.ImageType, batchSize int) error
	Save(values ...*model.ImageType) error
	First() (*model.ImageType, error)
	Take() (*model.ImageType, error)
	Last() (*model.ImageType, error)
	Find() ([]*model.ImageType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageType, err error)
	FindInBatches(result *[]*model.ImageType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ImageType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IImageTypeDo
	Assign(attrs ...field.AssignExpr) IImageTypeDo
	Joins(fields ...field.RelationField) IImageTypeDo
	Preload(fields ...field.RelationField) IImageTypeDo
	FirstOrInit() (*model.ImageType, error)
	FirstOrCreate() (*model.ImageType, error)
	FindByPage(offset int, limit int) (result []*model.ImageType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IImageTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i imageTypeDo) Debug() IImageTypeDo {
	return i.withDO(i.DO.Debug())
}

func (i imageTypeDo) WithContext(ctx context.Context) IImageTypeDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imageTypeDo) ReadDB() IImageTypeDo {
	return i.Clauses(dbresolver.Read)
}

func (i imageTypeDo) WriteDB() IImageTypeDo {
	return i.Clauses(dbresolver.Write)
}

func (i imageTypeDo) Session(config *gorm.Session) IImageTypeDo {
	return i.withDO(i.DO.Session(config))
}

func (i imageTypeDo) Clauses(conds ...clause.Expression) IImageTypeDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imageTypeDo) Returning(value interface{}, columns ...string) IImageTypeDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imageTypeDo) Not(conds ...gen.Condition) IImageTypeDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imageTypeDo) Or(conds ...gen.Condition) IImageTypeDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imageTypeDo) Select(conds ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imageTypeDo) Where(conds ...gen.Condition) IImageTypeDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imageTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IImageTypeDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imageTypeDo) Order(conds ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imageTypeDo) Distinct(cols ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imageTypeDo) Omit(cols ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imageTypeDo) Join(table schema.Tabler, on ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imageTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imageTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imageTypeDo) Group(cols ...field.Expr) IImageTypeDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imageTypeDo) Having(conds ...gen.Condition) IImageTypeDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imageTypeDo) Limit(limit int) IImageTypeDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imageTypeDo) Offset(offset int) IImageTypeDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imageTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IImageTypeDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imageTypeDo) Unscoped() IImageTypeDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imageTypeDo) Create(values ...*model.ImageType) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imageTypeDo) CreateInBatches(values []*model.ImageType, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imageTypeDo) Save(values ...*model.ImageType) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imageTypeDo) First() (*model.ImageType, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageType), nil
	}
}

func (i imageTypeDo) Take() (*model.ImageType, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageType), nil
	}
}

func (i imageTypeDo) Last() (*model.ImageType, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageType), nil
	}
}

func (i imageTypeDo) Find() ([]*model.ImageType, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImageType), err
}

func (i imageTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageType, err error) {
	buf := make([]*model.ImageType, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imageTypeDo) FindInBatches(result *[]*model.ImageType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imageTypeDo) Attrs(attrs ...field.AssignExpr) IImageTypeDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imageTypeDo) Assign(attrs ...field.AssignExpr) IImageTypeDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imageTypeDo) Joins(fields ...field.RelationField) IImageTypeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imageTypeDo) Preload(fields ...field.RelationField) IImageTypeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imageTypeDo) FirstOrInit() (*model.ImageType, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageType), nil
	}
}

func (i imageTypeDo) FirstOrCreate() (*model.ImageType, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageType), nil
	}
}

func (i imageTypeDo) FindByPage(offset int, limit int) (result []*model.ImageType, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imageTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imageTypeDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imageTypeDo) Delete(models ...*model.ImageType) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imageTypeDo) withDO(do gen.Dao) *imageTypeDo {
	i.DO = *do.(*gen.DO)
	return i
}
