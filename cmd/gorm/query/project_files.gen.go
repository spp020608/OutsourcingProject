// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newProjectFile(db *gorm.DB, opts ...gen.DOOption) projectFile {
	_projectFile := projectFile{}

	_projectFile.projectFileDo.UseDB(db, opts...)
	_projectFile.projectFileDo.UseModel(&model.ProjectFile{})

	tableName := _projectFile.projectFileDo.TableName()
	_projectFile.ALL = field.NewAsterisk(tableName)
	_projectFile.ID = field.NewInt64(tableName, "id")
	_projectFile.ProjectID = field.NewInt64(tableName, "project_id")
	_projectFile.UserID = field.NewInt64(tableName, "user_id")
	_projectFile.FileTypeID = field.NewInt64(tableName, "file_type_id")
	_projectFile.FileName = field.NewString(tableName, "file_name")
	_projectFile.FileURL = field.NewString(tableName, "file_url")
	_projectFile.CreateTime = field.NewTime(tableName, "create_time")

	_projectFile.fillFieldMap()

	return _projectFile
}

type projectFile struct {
	projectFileDo

	ALL        field.Asterisk
	ID         field.Int64  // 项目文件 ID、自增
	ProjectID  field.Int64  // 项目id
	UserID     field.Int64  // 用户id
	FileTypeID field.Int64  // 文件类型id
	FileName   field.String // 文件原名字
	FileURL    field.String // 文件路径
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (p projectFile) Table(newTableName string) *projectFile {
	p.projectFileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectFile) As(alias string) *projectFile {
	p.projectFileDo.DO = *(p.projectFileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectFile) updateTableName(table string) *projectFile {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.UserID = field.NewInt64(table, "user_id")
	p.FileTypeID = field.NewInt64(table, "file_type_id")
	p.FileName = field.NewString(table, "file_name")
	p.FileURL = field.NewString(table, "file_url")
	p.CreateTime = field.NewTime(table, "create_time")

	p.fillFieldMap()

	return p
}

func (p *projectFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectFile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["file_type_id"] = p.FileTypeID
	p.fieldMap["file_name"] = p.FileName
	p.fieldMap["file_url"] = p.FileURL
	p.fieldMap["create_time"] = p.CreateTime
}

func (p projectFile) clone(db *gorm.DB) projectFile {
	p.projectFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectFile) replaceDB(db *gorm.DB) projectFile {
	p.projectFileDo.ReplaceDB(db)
	return p
}

type projectFileDo struct{ gen.DO }

type IProjectFileDo interface {
	gen.SubQuery
	Debug() IProjectFileDo
	WithContext(ctx context.Context) IProjectFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectFileDo
	WriteDB() IProjectFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectFileDo
	Not(conds ...gen.Condition) IProjectFileDo
	Or(conds ...gen.Condition) IProjectFileDo
	Select(conds ...field.Expr) IProjectFileDo
	Where(conds ...gen.Condition) IProjectFileDo
	Order(conds ...field.Expr) IProjectFileDo
	Distinct(cols ...field.Expr) IProjectFileDo
	Omit(cols ...field.Expr) IProjectFileDo
	Join(table schema.Tabler, on ...field.Expr) IProjectFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectFileDo
	Group(cols ...field.Expr) IProjectFileDo
	Having(conds ...gen.Condition) IProjectFileDo
	Limit(limit int) IProjectFileDo
	Offset(offset int) IProjectFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFileDo
	Unscoped() IProjectFileDo
	Create(values ...*model.ProjectFile) error
	CreateInBatches(values []*model.ProjectFile, batchSize int) error
	Save(values ...*model.ProjectFile) error
	First() (*model.ProjectFile, error)
	Take() (*model.ProjectFile, error)
	Last() (*model.ProjectFile, error)
	Find() ([]*model.ProjectFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFile, err error)
	FindInBatches(result *[]*model.ProjectFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectFileDo
	Assign(attrs ...field.AssignExpr) IProjectFileDo
	Joins(fields ...field.RelationField) IProjectFileDo
	Preload(fields ...field.RelationField) IProjectFileDo
	FirstOrInit() (*model.ProjectFile, error)
	FirstOrCreate() (*model.ProjectFile, error)
	FindByPage(offset int, limit int) (result []*model.ProjectFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectFileDo) Debug() IProjectFileDo {
	return p.withDO(p.DO.Debug())
}

func (p projectFileDo) WithContext(ctx context.Context) IProjectFileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectFileDo) ReadDB() IProjectFileDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectFileDo) WriteDB() IProjectFileDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectFileDo) Session(config *gorm.Session) IProjectFileDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectFileDo) Clauses(conds ...clause.Expression) IProjectFileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectFileDo) Returning(value interface{}, columns ...string) IProjectFileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectFileDo) Not(conds ...gen.Condition) IProjectFileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectFileDo) Or(conds ...gen.Condition) IProjectFileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectFileDo) Select(conds ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectFileDo) Where(conds ...gen.Condition) IProjectFileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectFileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectFileDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectFileDo) Order(conds ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectFileDo) Distinct(cols ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectFileDo) Omit(cols ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectFileDo) Join(table schema.Tabler, on ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectFileDo) Group(cols ...field.Expr) IProjectFileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectFileDo) Having(conds ...gen.Condition) IProjectFileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectFileDo) Limit(limit int) IProjectFileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectFileDo) Offset(offset int) IProjectFileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectFileDo) Unscoped() IProjectFileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectFileDo) Create(values ...*model.ProjectFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectFileDo) CreateInBatches(values []*model.ProjectFile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectFileDo) Save(values ...*model.ProjectFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectFileDo) First() (*model.ProjectFile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFile), nil
	}
}

func (p projectFileDo) Take() (*model.ProjectFile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFile), nil
	}
}

func (p projectFileDo) Last() (*model.ProjectFile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFile), nil
	}
}

func (p projectFileDo) Find() ([]*model.ProjectFile, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectFile), err
}

func (p projectFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFile, err error) {
	buf := make([]*model.ProjectFile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectFileDo) FindInBatches(result *[]*model.ProjectFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectFileDo) Attrs(attrs ...field.AssignExpr) IProjectFileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectFileDo) Assign(attrs ...field.AssignExpr) IProjectFileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectFileDo) Joins(fields ...field.RelationField) IProjectFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectFileDo) Preload(fields ...field.RelationField) IProjectFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectFileDo) FirstOrInit() (*model.ProjectFile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFile), nil
	}
}

func (p projectFileDo) FirstOrCreate() (*model.ProjectFile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFile), nil
	}
}

func (p projectFileDo) FindByPage(offset int, limit int) (result []*model.ProjectFile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectFileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectFileDo) Delete(models ...*model.ProjectFile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectFileDo) withDO(do gen.Dao) *projectFileDo {
	p.DO = *do.(*gen.DO)
	return p
}
