// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Outsourcing/cmd/gorm/model"
)

func newUserPositionTypeRelation(db *gorm.DB, opts ...gen.DOOption) userPositionTypeRelation {
	_userPositionTypeRelation := userPositionTypeRelation{}

	_userPositionTypeRelation.userPositionTypeRelationDo.UseDB(db, opts...)
	_userPositionTypeRelation.userPositionTypeRelationDo.UseModel(&model.UserPositionTypeRelation{})

	tableName := _userPositionTypeRelation.userPositionTypeRelationDo.TableName()
	_userPositionTypeRelation.ALL = field.NewAsterisk(tableName)
	_userPositionTypeRelation.ID = field.NewInt64(tableName, "id")
	_userPositionTypeRelation.UserID = field.NewInt64(tableName, "user_id")
	_userPositionTypeRelation.PositionTypeID = field.NewInt64(tableName, "position_type_id")

	_userPositionTypeRelation.fillFieldMap()

	return _userPositionTypeRelation
}

type userPositionTypeRelation struct {
	userPositionTypeRelationDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64
	PositionTypeID field.Int64

	fieldMap map[string]field.Expr
}

func (u userPositionTypeRelation) Table(newTableName string) *userPositionTypeRelation {
	u.userPositionTypeRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPositionTypeRelation) As(alias string) *userPositionTypeRelation {
	u.userPositionTypeRelationDo.DO = *(u.userPositionTypeRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPositionTypeRelation) updateTableName(table string) *userPositionTypeRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.PositionTypeID = field.NewInt64(table, "position_type_id")

	u.fillFieldMap()

	return u
}

func (u *userPositionTypeRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPositionTypeRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["position_type_id"] = u.PositionTypeID
}

func (u userPositionTypeRelation) clone(db *gorm.DB) userPositionTypeRelation {
	u.userPositionTypeRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPositionTypeRelation) replaceDB(db *gorm.DB) userPositionTypeRelation {
	u.userPositionTypeRelationDo.ReplaceDB(db)
	return u
}

type userPositionTypeRelationDo struct{ gen.DO }

type IUserPositionTypeRelationDo interface {
	gen.SubQuery
	Debug() IUserPositionTypeRelationDo
	WithContext(ctx context.Context) IUserPositionTypeRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPositionTypeRelationDo
	WriteDB() IUserPositionTypeRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPositionTypeRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPositionTypeRelationDo
	Not(conds ...gen.Condition) IUserPositionTypeRelationDo
	Or(conds ...gen.Condition) IUserPositionTypeRelationDo
	Select(conds ...field.Expr) IUserPositionTypeRelationDo
	Where(conds ...gen.Condition) IUserPositionTypeRelationDo
	Order(conds ...field.Expr) IUserPositionTypeRelationDo
	Distinct(cols ...field.Expr) IUserPositionTypeRelationDo
	Omit(cols ...field.Expr) IUserPositionTypeRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo
	Group(cols ...field.Expr) IUserPositionTypeRelationDo
	Having(conds ...gen.Condition) IUserPositionTypeRelationDo
	Limit(limit int) IUserPositionTypeRelationDo
	Offset(offset int) IUserPositionTypeRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPositionTypeRelationDo
	Unscoped() IUserPositionTypeRelationDo
	Create(values ...*model.UserPositionTypeRelation) error
	CreateInBatches(values []*model.UserPositionTypeRelation, batchSize int) error
	Save(values ...*model.UserPositionTypeRelation) error
	First() (*model.UserPositionTypeRelation, error)
	Take() (*model.UserPositionTypeRelation, error)
	Last() (*model.UserPositionTypeRelation, error)
	Find() ([]*model.UserPositionTypeRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPositionTypeRelation, err error)
	FindInBatches(result *[]*model.UserPositionTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPositionTypeRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPositionTypeRelationDo
	Assign(attrs ...field.AssignExpr) IUserPositionTypeRelationDo
	Joins(fields ...field.RelationField) IUserPositionTypeRelationDo
	Preload(fields ...field.RelationField) IUserPositionTypeRelationDo
	FirstOrInit() (*model.UserPositionTypeRelation, error)
	FirstOrCreate() (*model.UserPositionTypeRelation, error)
	FindByPage(offset int, limit int) (result []*model.UserPositionTypeRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPositionTypeRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPositionTypeRelationDo) Debug() IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userPositionTypeRelationDo) WithContext(ctx context.Context) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPositionTypeRelationDo) ReadDB() IUserPositionTypeRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPositionTypeRelationDo) WriteDB() IUserPositionTypeRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPositionTypeRelationDo) Session(config *gorm.Session) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPositionTypeRelationDo) Clauses(conds ...clause.Expression) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPositionTypeRelationDo) Returning(value interface{}, columns ...string) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPositionTypeRelationDo) Not(conds ...gen.Condition) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPositionTypeRelationDo) Or(conds ...gen.Condition) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPositionTypeRelationDo) Select(conds ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPositionTypeRelationDo) Where(conds ...gen.Condition) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPositionTypeRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserPositionTypeRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userPositionTypeRelationDo) Order(conds ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPositionTypeRelationDo) Distinct(cols ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPositionTypeRelationDo) Omit(cols ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPositionTypeRelationDo) Join(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPositionTypeRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPositionTypeRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPositionTypeRelationDo) Group(cols ...field.Expr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPositionTypeRelationDo) Having(conds ...gen.Condition) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPositionTypeRelationDo) Limit(limit int) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPositionTypeRelationDo) Offset(offset int) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPositionTypeRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPositionTypeRelationDo) Unscoped() IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPositionTypeRelationDo) Create(values ...*model.UserPositionTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPositionTypeRelationDo) CreateInBatches(values []*model.UserPositionTypeRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPositionTypeRelationDo) Save(values ...*model.UserPositionTypeRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPositionTypeRelationDo) First() (*model.UserPositionTypeRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPositionTypeRelation), nil
	}
}

func (u userPositionTypeRelationDo) Take() (*model.UserPositionTypeRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPositionTypeRelation), nil
	}
}

func (u userPositionTypeRelationDo) Last() (*model.UserPositionTypeRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPositionTypeRelation), nil
	}
}

func (u userPositionTypeRelationDo) Find() ([]*model.UserPositionTypeRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPositionTypeRelation), err
}

func (u userPositionTypeRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPositionTypeRelation, err error) {
	buf := make([]*model.UserPositionTypeRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPositionTypeRelationDo) FindInBatches(result *[]*model.UserPositionTypeRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPositionTypeRelationDo) Attrs(attrs ...field.AssignExpr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPositionTypeRelationDo) Assign(attrs ...field.AssignExpr) IUserPositionTypeRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPositionTypeRelationDo) Joins(fields ...field.RelationField) IUserPositionTypeRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPositionTypeRelationDo) Preload(fields ...field.RelationField) IUserPositionTypeRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPositionTypeRelationDo) FirstOrInit() (*model.UserPositionTypeRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPositionTypeRelation), nil
	}
}

func (u userPositionTypeRelationDo) FirstOrCreate() (*model.UserPositionTypeRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPositionTypeRelation), nil
	}
}

func (u userPositionTypeRelationDo) FindByPage(offset int, limit int) (result []*model.UserPositionTypeRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPositionTypeRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPositionTypeRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPositionTypeRelationDo) Delete(models ...*model.UserPositionTypeRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPositionTypeRelationDo) withDO(do gen.Dao) *userPositionTypeRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
